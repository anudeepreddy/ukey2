// Copyright 2020 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.12.4
// source: proto/ukey.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Ukey2HandshakeCipher int32

const (
	Ukey2HandshakeCipher_RESERVED    Ukey2HandshakeCipher = 0
	Ukey2HandshakeCipher_P256_SHA512 Ukey2HandshakeCipher = 100 // NIST P-256 used for ECDH, SHA512 used for
	// commitment
	Ukey2HandshakeCipher_CURVE25519_SHA512 Ukey2HandshakeCipher = 200 // Curve 25519 used for ECDH, SHA512 used for
)

// Enum value maps for Ukey2HandshakeCipher.
var (
	Ukey2HandshakeCipher_name = map[int32]string{
		0:   "RESERVED",
		100: "P256_SHA512",
		200: "CURVE25519_SHA512",
	}
	Ukey2HandshakeCipher_value = map[string]int32{
		"RESERVED":          0,
		"P256_SHA512":       100,
		"CURVE25519_SHA512": 200,
	}
)

func (x Ukey2HandshakeCipher) Enum() *Ukey2HandshakeCipher {
	p := new(Ukey2HandshakeCipher)
	*p = x
	return p
}

func (x Ukey2HandshakeCipher) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ukey2HandshakeCipher) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_ukey_proto_enumTypes[0].Descriptor()
}

func (Ukey2HandshakeCipher) Type() protoreflect.EnumType {
	return &file_proto_ukey_proto_enumTypes[0]
}

func (x Ukey2HandshakeCipher) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Ukey2HandshakeCipher) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Ukey2HandshakeCipher(num)
	return nil
}

// Deprecated: Use Ukey2HandshakeCipher.Descriptor instead.
func (Ukey2HandshakeCipher) EnumDescriptor() ([]byte, []int) {
	return file_proto_ukey_proto_rawDescGZIP(), []int{0}
}

type Ukey2Message_Type int32

const (
	Ukey2Message_UNKNOWN_DO_NOT_USE Ukey2Message_Type = 0
	Ukey2Message_ALERT              Ukey2Message_Type = 1
	Ukey2Message_CLIENT_INIT        Ukey2Message_Type = 2
	Ukey2Message_SERVER_INIT        Ukey2Message_Type = 3
	Ukey2Message_CLIENT_FINISH      Ukey2Message_Type = 4
)

// Enum value maps for Ukey2Message_Type.
var (
	Ukey2Message_Type_name = map[int32]string{
		0: "UNKNOWN_DO_NOT_USE",
		1: "ALERT",
		2: "CLIENT_INIT",
		3: "SERVER_INIT",
		4: "CLIENT_FINISH",
	}
	Ukey2Message_Type_value = map[string]int32{
		"UNKNOWN_DO_NOT_USE": 0,
		"ALERT":              1,
		"CLIENT_INIT":        2,
		"SERVER_INIT":        3,
		"CLIENT_FINISH":      4,
	}
)

func (x Ukey2Message_Type) Enum() *Ukey2Message_Type {
	p := new(Ukey2Message_Type)
	*p = x
	return p
}

func (x Ukey2Message_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ukey2Message_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_ukey_proto_enumTypes[1].Descriptor()
}

func (Ukey2Message_Type) Type() protoreflect.EnumType {
	return &file_proto_ukey_proto_enumTypes[1]
}

func (x Ukey2Message_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Ukey2Message_Type) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Ukey2Message_Type(num)
	return nil
}

// Deprecated: Use Ukey2Message_Type.Descriptor instead.
func (Ukey2Message_Type) EnumDescriptor() ([]byte, []int) {
	return file_proto_ukey_proto_rawDescGZIP(), []int{0, 0}
}

type Ukey2Alert_AlertType int32

const (
	// Framing errors
	Ukey2Alert_BAD_MESSAGE       Ukey2Alert_AlertType = 1 // The message could not be deserialized
	Ukey2Alert_BAD_MESSAGE_TYPE  Ukey2Alert_AlertType = 2 // message_type has an undefined value
	Ukey2Alert_INCORRECT_MESSAGE Ukey2Alert_AlertType = 3 // message_type received does not correspond to
	// expected type at this stage of the protocol
	Ukey2Alert_BAD_MESSAGE_DATA Ukey2Alert_AlertType = 4 // Could not deserialize message_data as per
	// ClientInit and ServerInit errors
	Ukey2Alert_BAD_VERSION Ukey2Alert_AlertType = 100 // version is invalid; server cannot find
	// suitable version to speak with client.
	Ukey2Alert_BAD_RANDOM Ukey2Alert_AlertType = 101 // Random data is missing or of incorrect
	// length
	Ukey2Alert_BAD_HANDSHAKE_CIPHER Ukey2Alert_AlertType = 102 // No suitable handshake ciphers were found
	Ukey2Alert_BAD_NEXT_PROTOCOL    Ukey2Alert_AlertType = 103 // The next protocol is missing, unknown, or
	// unsupported
	Ukey2Alert_BAD_PUBLIC_KEY Ukey2Alert_AlertType = 104 // The public key could not be parsed
	// Other errors
	Ukey2Alert_INTERNAL_ERROR Ukey2Alert_AlertType = 200 // An internal error has occurred. error_message
)

// Enum value maps for Ukey2Alert_AlertType.
var (
	Ukey2Alert_AlertType_name = map[int32]string{
		1:   "BAD_MESSAGE",
		2:   "BAD_MESSAGE_TYPE",
		3:   "INCORRECT_MESSAGE",
		4:   "BAD_MESSAGE_DATA",
		100: "BAD_VERSION",
		101: "BAD_RANDOM",
		102: "BAD_HANDSHAKE_CIPHER",
		103: "BAD_NEXT_PROTOCOL",
		104: "BAD_PUBLIC_KEY",
		200: "INTERNAL_ERROR",
	}
	Ukey2Alert_AlertType_value = map[string]int32{
		"BAD_MESSAGE":          1,
		"BAD_MESSAGE_TYPE":     2,
		"INCORRECT_MESSAGE":    3,
		"BAD_MESSAGE_DATA":     4,
		"BAD_VERSION":          100,
		"BAD_RANDOM":           101,
		"BAD_HANDSHAKE_CIPHER": 102,
		"BAD_NEXT_PROTOCOL":    103,
		"BAD_PUBLIC_KEY":       104,
		"INTERNAL_ERROR":       200,
	}
)

func (x Ukey2Alert_AlertType) Enum() *Ukey2Alert_AlertType {
	p := new(Ukey2Alert_AlertType)
	*p = x
	return p
}

func (x Ukey2Alert_AlertType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ukey2Alert_AlertType) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_ukey_proto_enumTypes[2].Descriptor()
}

func (Ukey2Alert_AlertType) Type() protoreflect.EnumType {
	return &file_proto_ukey_proto_enumTypes[2]
}

func (x Ukey2Alert_AlertType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Ukey2Alert_AlertType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Ukey2Alert_AlertType(num)
	return nil
}

// Deprecated: Use Ukey2Alert_AlertType.Descriptor instead.
func (Ukey2Alert_AlertType) EnumDescriptor() ([]byte, []int) {
	return file_proto_ukey_proto_rawDescGZIP(), []int{1, 0}
}

type Ukey2Message struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MessageType *Ukey2Message_Type `protobuf:"varint,1,opt,name=message_type,json=messageType,enum=securegcm.Ukey2Message_Type" json:"message_type,omitempty"` // Identifies message type
	MessageData []byte             `protobuf:"bytes,2,opt,name=message_data,json=messageData" json:"message_data,omitempty"`                                   // Actual message, to be parsed according to
}

func (x *Ukey2Message) Reset() {
	*x = Ukey2Message{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_ukey_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ukey2Message) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ukey2Message) ProtoMessage() {}

func (x *Ukey2Message) ProtoReflect() protoreflect.Message {
	mi := &file_proto_ukey_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ukey2Message.ProtoReflect.Descriptor instead.
func (*Ukey2Message) Descriptor() ([]byte, []int) {
	return file_proto_ukey_proto_rawDescGZIP(), []int{0}
}

func (x *Ukey2Message) GetMessageType() Ukey2Message_Type {
	if x != nil && x.MessageType != nil {
		return *x.MessageType
	}
	return Ukey2Message_UNKNOWN_DO_NOT_USE
}

func (x *Ukey2Message) GetMessageData() []byte {
	if x != nil {
		return x.MessageData
	}
	return nil
}

type Ukey2Alert struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type         *Ukey2Alert_AlertType `protobuf:"varint,1,opt,name=type,enum=securegcm.Ukey2Alert_AlertType" json:"type,omitempty"`
	ErrorMessage *string               `protobuf:"bytes,2,opt,name=error_message,json=errorMessage" json:"error_message,omitempty"`
}

func (x *Ukey2Alert) Reset() {
	*x = Ukey2Alert{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_ukey_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ukey2Alert) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ukey2Alert) ProtoMessage() {}

func (x *Ukey2Alert) ProtoReflect() protoreflect.Message {
	mi := &file_proto_ukey_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ukey2Alert.ProtoReflect.Descriptor instead.
func (*Ukey2Alert) Descriptor() ([]byte, []int) {
	return file_proto_ukey_proto_rawDescGZIP(), []int{1}
}

func (x *Ukey2Alert) GetType() Ukey2Alert_AlertType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return Ukey2Alert_BAD_MESSAGE
}

func (x *Ukey2Alert) GetErrorMessage() string {
	if x != nil && x.ErrorMessage != nil {
		return *x.ErrorMessage
	}
	return ""
}

type Ukey2ClientInit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version *int32 `protobuf:"varint,1,opt,name=version" json:"version,omitempty"` // highest supported version for rollback
	// protection
	Random            []byte                              `protobuf:"bytes,2,opt,name=random" json:"random,omitempty"` // random bytes for replay/reuse protection
	CipherCommitments []*Ukey2ClientInit_CipherCommitment `protobuf:"bytes,3,rep,name=cipher_commitments,json=cipherCommitments" json:"cipher_commitments,omitempty"`
	// Next protocol that the client wants to speak.
	NextProtocol *string `protobuf:"bytes,4,opt,name=next_protocol,json=nextProtocol" json:"next_protocol,omitempty"`
}

func (x *Ukey2ClientInit) Reset() {
	*x = Ukey2ClientInit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_ukey_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ukey2ClientInit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ukey2ClientInit) ProtoMessage() {}

func (x *Ukey2ClientInit) ProtoReflect() protoreflect.Message {
	mi := &file_proto_ukey_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ukey2ClientInit.ProtoReflect.Descriptor instead.
func (*Ukey2ClientInit) Descriptor() ([]byte, []int) {
	return file_proto_ukey_proto_rawDescGZIP(), []int{2}
}

func (x *Ukey2ClientInit) GetVersion() int32 {
	if x != nil && x.Version != nil {
		return *x.Version
	}
	return 0
}

func (x *Ukey2ClientInit) GetRandom() []byte {
	if x != nil {
		return x.Random
	}
	return nil
}

func (x *Ukey2ClientInit) GetCipherCommitments() []*Ukey2ClientInit_CipherCommitment {
	if x != nil {
		return x.CipherCommitments
	}
	return nil
}

func (x *Ukey2ClientInit) GetNextProtocol() string {
	if x != nil && x.NextProtocol != nil {
		return *x.NextProtocol
	}
	return ""
}

type Ukey2ServerInit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version *int32 `protobuf:"varint,1,opt,name=version" json:"version,omitempty"` // highest supported version for rollback
	// protection
	Random []byte `protobuf:"bytes,2,opt,name=random" json:"random,omitempty"` // random bytes for replay/reuse protection
	// Selected Cipher and corresponding public key
	HandshakeCipher *Ukey2HandshakeCipher `protobuf:"varint,3,opt,name=handshake_cipher,json=handshakeCipher,enum=securegcm.Ukey2HandshakeCipher" json:"handshake_cipher,omitempty"`
	PublicKey       []byte                `protobuf:"bytes,4,opt,name=public_key,json=publicKey" json:"public_key,omitempty"`
}

func (x *Ukey2ServerInit) Reset() {
	*x = Ukey2ServerInit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_ukey_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ukey2ServerInit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ukey2ServerInit) ProtoMessage() {}

func (x *Ukey2ServerInit) ProtoReflect() protoreflect.Message {
	mi := &file_proto_ukey_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ukey2ServerInit.ProtoReflect.Descriptor instead.
func (*Ukey2ServerInit) Descriptor() ([]byte, []int) {
	return file_proto_ukey_proto_rawDescGZIP(), []int{3}
}

func (x *Ukey2ServerInit) GetVersion() int32 {
	if x != nil && x.Version != nil {
		return *x.Version
	}
	return 0
}

func (x *Ukey2ServerInit) GetRandom() []byte {
	if x != nil {
		return x.Random
	}
	return nil
}

func (x *Ukey2ServerInit) GetHandshakeCipher() Ukey2HandshakeCipher {
	if x != nil && x.HandshakeCipher != nil {
		return *x.HandshakeCipher
	}
	return Ukey2HandshakeCipher_RESERVED
}

func (x *Ukey2ServerInit) GetPublicKey() []byte {
	if x != nil {
		return x.PublicKey
	}
	return nil
}

type Ukey2ClientFinished struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PublicKey []byte `protobuf:"bytes,1,opt,name=public_key,json=publicKey" json:"public_key,omitempty"` // public key matching selected handshake
}

func (x *Ukey2ClientFinished) Reset() {
	*x = Ukey2ClientFinished{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_ukey_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ukey2ClientFinished) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ukey2ClientFinished) ProtoMessage() {}

func (x *Ukey2ClientFinished) ProtoReflect() protoreflect.Message {
	mi := &file_proto_ukey_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ukey2ClientFinished.ProtoReflect.Descriptor instead.
func (*Ukey2ClientFinished) Descriptor() ([]byte, []int) {
	return file_proto_ukey_proto_rawDescGZIP(), []int{4}
}

func (x *Ukey2ClientFinished) GetPublicKey() []byte {
	if x != nil {
		return x.PublicKey
	}
	return nil
}

// One commitment (hash of ClientFinished containing public key) per supported
// cipher
type Ukey2ClientInit_CipherCommitment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HandshakeCipher *Ukey2HandshakeCipher `protobuf:"varint,1,opt,name=handshake_cipher,json=handshakeCipher,enum=securegcm.Ukey2HandshakeCipher" json:"handshake_cipher,omitempty"`
	Commitment      []byte                `protobuf:"bytes,2,opt,name=commitment" json:"commitment,omitempty"`
}

func (x *Ukey2ClientInit_CipherCommitment) Reset() {
	*x = Ukey2ClientInit_CipherCommitment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_ukey_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ukey2ClientInit_CipherCommitment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ukey2ClientInit_CipherCommitment) ProtoMessage() {}

func (x *Ukey2ClientInit_CipherCommitment) ProtoReflect() protoreflect.Message {
	mi := &file_proto_ukey_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ukey2ClientInit_CipherCommitment.ProtoReflect.Descriptor instead.
func (*Ukey2ClientInit_CipherCommitment) Descriptor() ([]byte, []int) {
	return file_proto_ukey_proto_rawDescGZIP(), []int{2, 0}
}

func (x *Ukey2ClientInit_CipherCommitment) GetHandshakeCipher() Ukey2HandshakeCipher {
	if x != nil && x.HandshakeCipher != nil {
		return *x.HandshakeCipher
	}
	return Ukey2HandshakeCipher_RESERVED
}

func (x *Ukey2ClientInit_CipherCommitment) GetCommitment() []byte {
	if x != nil {
		return x.Commitment
	}
	return nil
}

var File_proto_ukey_proto protoreflect.FileDescriptor

var file_proto_ukey_proto_rawDesc = []byte{
	0x0a, 0x10, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x75, 0x6b, 0x65, 0x79, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x09, 0x73, 0x65, 0x63, 0x75, 0x72, 0x65, 0x67, 0x63, 0x6d, 0x22, 0xd2, 0x01,
	0x0a, 0x0c, 0x55, 0x6b, 0x65, 0x79, 0x32, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x3f,
	0x0a, 0x0c, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x65, 0x67, 0x63, 0x6d,
	0x2e, 0x55, 0x6b, 0x65, 0x79, 0x32, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x0b, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x21, 0x0a, 0x0c, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x44, 0x61,
	0x74, 0x61, 0x22, 0x5e, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x12, 0x55, 0x4e,
	0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x44, 0x4f, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x55, 0x53, 0x45,
	0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x41, 0x4c, 0x45, 0x52, 0x54, 0x10, 0x01, 0x12, 0x0f, 0x0a,
	0x0b, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x49, 0x4e, 0x49, 0x54, 0x10, 0x02, 0x12, 0x0f,
	0x0a, 0x0b, 0x53, 0x45, 0x52, 0x56, 0x45, 0x52, 0x5f, 0x49, 0x4e, 0x49, 0x54, 0x10, 0x03, 0x12,
	0x11, 0x0a, 0x0d, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x46, 0x49, 0x4e, 0x49, 0x53, 0x48,
	0x10, 0x04, 0x22, 0xc3, 0x02, 0x0a, 0x0a, 0x55, 0x6b, 0x65, 0x79, 0x32, 0x41, 0x6c, 0x65, 0x72,
	0x74, 0x12, 0x33, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1f, 0x2e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x65, 0x67, 0x63, 0x6d, 0x2e, 0x55, 0x6b, 0x65, 0x79,
	0x32, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xda, 0x01, 0x0a, 0x09,
	0x41, 0x6c, 0x65, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0f, 0x0a, 0x0b, 0x42, 0x41, 0x44,
	0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x42, 0x41,
	0x44, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x02,
	0x12, 0x15, 0x0a, 0x11, 0x49, 0x4e, 0x43, 0x4f, 0x52, 0x52, 0x45, 0x43, 0x54, 0x5f, 0x4d, 0x45,
	0x53, 0x53, 0x41, 0x47, 0x45, 0x10, 0x03, 0x12, 0x14, 0x0a, 0x10, 0x42, 0x41, 0x44, 0x5f, 0x4d,
	0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x10, 0x04, 0x12, 0x0f, 0x0a,
	0x0b, 0x42, 0x41, 0x44, 0x5f, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e, 0x10, 0x64, 0x12, 0x0e,
	0x0a, 0x0a, 0x42, 0x41, 0x44, 0x5f, 0x52, 0x41, 0x4e, 0x44, 0x4f, 0x4d, 0x10, 0x65, 0x12, 0x18,
	0x0a, 0x14, 0x42, 0x41, 0x44, 0x5f, 0x48, 0x41, 0x4e, 0x44, 0x53, 0x48, 0x41, 0x4b, 0x45, 0x5f,
	0x43, 0x49, 0x50, 0x48, 0x45, 0x52, 0x10, 0x66, 0x12, 0x15, 0x0a, 0x11, 0x42, 0x41, 0x44, 0x5f,
	0x4e, 0x45, 0x58, 0x54, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x10, 0x67, 0x12,
	0x12, 0x0a, 0x0e, 0x42, 0x41, 0x44, 0x5f, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x43, 0x5f, 0x4b, 0x45,
	0x59, 0x10, 0x68, 0x12, 0x13, 0x0a, 0x0e, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x5f,
	0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0xc8, 0x01, 0x22, 0xc4, 0x02, 0x0a, 0x0f, 0x55, 0x6b, 0x65,
	0x79, 0x32, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x69, 0x74, 0x12, 0x18, 0x0a, 0x07,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x12, 0x5a,
	0x0a, 0x12, 0x63, 0x69, 0x70, 0x68, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x73, 0x65, 0x63,
	0x75, 0x72, 0x65, 0x67, 0x63, 0x6d, 0x2e, 0x55, 0x6b, 0x65, 0x79, 0x32, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x49, 0x6e, 0x69, 0x74, 0x2e, 0x43, 0x69, 0x70, 0x68, 0x65, 0x72, 0x43, 0x6f, 0x6d,
	0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x11, 0x63, 0x69, 0x70, 0x68, 0x65, 0x72, 0x43,
	0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x6e, 0x65,
	0x78, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x1a,
	0x7e, 0x0a, 0x10, 0x43, 0x69, 0x70, 0x68, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d,
	0x65, 0x6e, 0x74, 0x12, 0x4a, 0x0a, 0x10, 0x68, 0x61, 0x6e, 0x64, 0x73, 0x68, 0x61, 0x6b, 0x65,
	0x5f, 0x63, 0x69, 0x70, 0x68, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e,
	0x73, 0x65, 0x63, 0x75, 0x72, 0x65, 0x67, 0x63, 0x6d, 0x2e, 0x55, 0x6b, 0x65, 0x79, 0x32, 0x48,
	0x61, 0x6e, 0x64, 0x73, 0x68, 0x61, 0x6b, 0x65, 0x43, 0x69, 0x70, 0x68, 0x65, 0x72, 0x52, 0x0f,
	0x68, 0x61, 0x6e, 0x64, 0x73, 0x68, 0x61, 0x6b, 0x65, 0x43, 0x69, 0x70, 0x68, 0x65, 0x72, 0x12,
	0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x22,
	0xae, 0x01, 0x0a, 0x0f, 0x55, 0x6b, 0x65, 0x79, 0x32, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49,
	0x6e, 0x69, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a,
	0x06, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x72,
	0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x12, 0x4a, 0x0a, 0x10, 0x68, 0x61, 0x6e, 0x64, 0x73, 0x68, 0x61,
	0x6b, 0x65, 0x5f, 0x63, 0x69, 0x70, 0x68, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1f, 0x2e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x65, 0x67, 0x63, 0x6d, 0x2e, 0x55, 0x6b, 0x65, 0x79,
	0x32, 0x48, 0x61, 0x6e, 0x64, 0x73, 0x68, 0x61, 0x6b, 0x65, 0x43, 0x69, 0x70, 0x68, 0x65, 0x72,
	0x52, 0x0f, 0x68, 0x61, 0x6e, 0x64, 0x73, 0x68, 0x61, 0x6b, 0x65, 0x43, 0x69, 0x70, 0x68, 0x65,
	0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79,
	0x22, 0x34, 0x0a, 0x13, 0x55, 0x6b, 0x65, 0x79, 0x32, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x46,
	0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x2a, 0x4d, 0x0a, 0x14, 0x55, 0x6b, 0x65, 0x79, 0x32, 0x48,
	0x61, 0x6e, 0x64, 0x73, 0x68, 0x61, 0x6b, 0x65, 0x43, 0x69, 0x70, 0x68, 0x65, 0x72, 0x12, 0x0c,
	0x0a, 0x08, 0x52, 0x45, 0x53, 0x45, 0x52, 0x56, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b,
	0x50, 0x32, 0x35, 0x36, 0x5f, 0x53, 0x48, 0x41, 0x35, 0x31, 0x32, 0x10, 0x64, 0x12, 0x16, 0x0a,
	0x11, 0x43, 0x55, 0x52, 0x56, 0x45, 0x32, 0x35, 0x35, 0x31, 0x39, 0x5f, 0x53, 0x48, 0x41, 0x35,
	0x31, 0x32, 0x10, 0xc8, 0x01, 0x42, 0x40, 0x0a, 0x2b, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x2e, 0x63, 0x72, 0x79,
	0x70, 0x74, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x6c, 0x69, 0x62, 0x2e, 0x73, 0x65, 0x63, 0x75, 0x72,
	0x65, 0x67, 0x63, 0x6d, 0x42, 0x09, 0x55, 0x6b, 0x65, 0x79, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48,
	0x03, 0x5a, 0x04, 0x2e, 0x2f, 0x70, 0x62,
}

var (
	file_proto_ukey_proto_rawDescOnce sync.Once
	file_proto_ukey_proto_rawDescData = file_proto_ukey_proto_rawDesc
)

func file_proto_ukey_proto_rawDescGZIP() []byte {
	file_proto_ukey_proto_rawDescOnce.Do(func() {
		file_proto_ukey_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_ukey_proto_rawDescData)
	})
	return file_proto_ukey_proto_rawDescData
}

var file_proto_ukey_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_proto_ukey_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_proto_ukey_proto_goTypes = []interface{}{
	(Ukey2HandshakeCipher)(0),                // 0: securegcm.Ukey2HandshakeCipher
	(Ukey2Message_Type)(0),                   // 1: securegcm.Ukey2Message.Type
	(Ukey2Alert_AlertType)(0),                // 2: securegcm.Ukey2Alert.AlertType
	(*Ukey2Message)(nil),                     // 3: securegcm.Ukey2Message
	(*Ukey2Alert)(nil),                       // 4: securegcm.Ukey2Alert
	(*Ukey2ClientInit)(nil),                  // 5: securegcm.Ukey2ClientInit
	(*Ukey2ServerInit)(nil),                  // 6: securegcm.Ukey2ServerInit
	(*Ukey2ClientFinished)(nil),              // 7: securegcm.Ukey2ClientFinished
	(*Ukey2ClientInit_CipherCommitment)(nil), // 8: securegcm.Ukey2ClientInit.CipherCommitment
}
var file_proto_ukey_proto_depIdxs = []int32{
	1, // 0: securegcm.Ukey2Message.message_type:type_name -> securegcm.Ukey2Message.Type
	2, // 1: securegcm.Ukey2Alert.type:type_name -> securegcm.Ukey2Alert.AlertType
	8, // 2: securegcm.Ukey2ClientInit.cipher_commitments:type_name -> securegcm.Ukey2ClientInit.CipherCommitment
	0, // 3: securegcm.Ukey2ServerInit.handshake_cipher:type_name -> securegcm.Ukey2HandshakeCipher
	0, // 4: securegcm.Ukey2ClientInit.CipherCommitment.handshake_cipher:type_name -> securegcm.Ukey2HandshakeCipher
	5, // [5:5] is the sub-list for method output_type
	5, // [5:5] is the sub-list for method input_type
	5, // [5:5] is the sub-list for extension type_name
	5, // [5:5] is the sub-list for extension extendee
	0, // [0:5] is the sub-list for field type_name
}

func init() { file_proto_ukey_proto_init() }
func file_proto_ukey_proto_init() {
	if File_proto_ukey_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_ukey_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ukey2Message); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_ukey_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ukey2Alert); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_ukey_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ukey2ClientInit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_ukey_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ukey2ServerInit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_ukey_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ukey2ClientFinished); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_ukey_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ukey2ClientInit_CipherCommitment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_ukey_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_proto_ukey_proto_goTypes,
		DependencyIndexes: file_proto_ukey_proto_depIdxs,
		EnumInfos:         file_proto_ukey_proto_enumTypes,
		MessageInfos:      file_proto_ukey_proto_msgTypes,
	}.Build()
	File_proto_ukey_proto = out.File
	file_proto_ukey_proto_rawDesc = nil
	file_proto_ukey_proto_goTypes = nil
	file_proto_ukey_proto_depIdxs = nil
}
