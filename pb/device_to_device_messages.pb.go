// Copyright 2020 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.12.4
// source: proto/device_to_device_messages.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Type of curve
type Curve int32

const (
	Curve_ED_25519 Curve = 1
)

// Enum value maps for Curve.
var (
	Curve_name = map[int32]string{
		1: "ED_25519",
	}
	Curve_value = map[string]int32{
		"ED_25519": 1,
	}
)

func (x Curve) Enum() *Curve {
	p := new(Curve)
	*p = x
	return p
}

func (x Curve) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Curve) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_device_to_device_messages_proto_enumTypes[0].Descriptor()
}

func (Curve) Type() protoreflect.EnumType {
	return &file_proto_device_to_device_messages_proto_enumTypes[0]
}

func (x Curve) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Curve) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Curve(num)
	return nil
}

// Deprecated: Use Curve.Descriptor instead.
func (Curve) EnumDescriptor() ([]byte, []int) {
	return file_proto_device_to_device_messages_proto_rawDescGZIP(), []int{0}
}

// Used by protocols between devices
type DeviceToDeviceMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the payload of the message
	Message []byte `protobuf:"bytes,1,opt,name=message" json:"message,omitempty"`
	// the sequence number of the message - must be increasing.
	SequenceNumber *int32 `protobuf:"varint,2,opt,name=sequence_number,json=sequenceNumber" json:"sequence_number,omitempty"`
}

func (x *DeviceToDeviceMessage) Reset() {
	*x = DeviceToDeviceMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_device_to_device_messages_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceToDeviceMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceToDeviceMessage) ProtoMessage() {}

func (x *DeviceToDeviceMessage) ProtoReflect() protoreflect.Message {
	mi := &file_proto_device_to_device_messages_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceToDeviceMessage.ProtoReflect.Descriptor instead.
func (*DeviceToDeviceMessage) Descriptor() ([]byte, []int) {
	return file_proto_device_to_device_messages_proto_rawDescGZIP(), []int{0}
}

func (x *DeviceToDeviceMessage) GetMessage() []byte {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *DeviceToDeviceMessage) GetSequenceNumber() int32 {
	if x != nil && x.SequenceNumber != nil {
		return *x.SequenceNumber
	}
	return 0
}

// sent as the first message from initiator to responder
// in an unauthenticated Diffie-Hellman Key Exchange
type InitiatorHello struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The session public key to send to the responder
	PublicDhKey *GenericPublicKey `protobuf:"bytes,1,opt,name=public_dh_key,json=publicDhKey" json:"public_dh_key,omitempty"`
	// The protocol version
	ProtocolVersion *int32 `protobuf:"varint,2,opt,name=protocol_version,json=protocolVersion,def=0" json:"protocol_version,omitempty"`
}

// Default values for InitiatorHello fields.
const (
	Default_InitiatorHello_ProtocolVersion = int32(0)
)

func (x *InitiatorHello) Reset() {
	*x = InitiatorHello{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_device_to_device_messages_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InitiatorHello) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InitiatorHello) ProtoMessage() {}

func (x *InitiatorHello) ProtoReflect() protoreflect.Message {
	mi := &file_proto_device_to_device_messages_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InitiatorHello.ProtoReflect.Descriptor instead.
func (*InitiatorHello) Descriptor() ([]byte, []int) {
	return file_proto_device_to_device_messages_proto_rawDescGZIP(), []int{1}
}

func (x *InitiatorHello) GetPublicDhKey() *GenericPublicKey {
	if x != nil {
		return x.PublicDhKey
	}
	return nil
}

func (x *InitiatorHello) GetProtocolVersion() int32 {
	if x != nil && x.ProtocolVersion != nil {
		return *x.ProtocolVersion
	}
	return Default_InitiatorHello_ProtocolVersion
}

// sent inside the header of the first message from the responder to the
// initiator in an unauthenticated Diffie-Hellman Key Exchange
type ResponderHello struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The session public key to send to the initiator
	PublicDhKey *GenericPublicKey `protobuf:"bytes,1,opt,name=public_dh_key,json=publicDhKey" json:"public_dh_key,omitempty"`
	// The protocol version
	ProtocolVersion *int32 `protobuf:"varint,2,opt,name=protocol_version,json=protocolVersion,def=0" json:"protocol_version,omitempty"`
}

// Default values for ResponderHello fields.
const (
	Default_ResponderHello_ProtocolVersion = int32(0)
)

func (x *ResponderHello) Reset() {
	*x = ResponderHello{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_device_to_device_messages_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponderHello) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponderHello) ProtoMessage() {}

func (x *ResponderHello) ProtoReflect() protoreflect.Message {
	mi := &file_proto_device_to_device_messages_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponderHello.ProtoReflect.Descriptor instead.
func (*ResponderHello) Descriptor() ([]byte, []int) {
	return file_proto_device_to_device_messages_proto_rawDescGZIP(), []int{2}
}

func (x *ResponderHello) GetPublicDhKey() *GenericPublicKey {
	if x != nil {
		return x.PublicDhKey
	}
	return nil
}

func (x *ResponderHello) GetProtocolVersion() int32 {
	if x != nil && x.ProtocolVersion != nil {
		return *x.ProtocolVersion
	}
	return Default_ResponderHello_ProtocolVersion
}

// A convenience proto for encoding curve points in affine representation
type EcPoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Curve *Curve `protobuf:"varint,1,req,name=curve,enum=securegcm.Curve" json:"curve,omitempty"`
	// x and y are encoded in big-endian two's complement
	// client MUST verify (x,y) is a valid point on the specified curve
	X []byte `protobuf:"bytes,2,req,name=x" json:"x,omitempty"`
	Y []byte `protobuf:"bytes,3,req,name=y" json:"y,omitempty"`
}

func (x *EcPoint) Reset() {
	*x = EcPoint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_device_to_device_messages_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EcPoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EcPoint) ProtoMessage() {}

func (x *EcPoint) ProtoReflect() protoreflect.Message {
	mi := &file_proto_device_to_device_messages_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EcPoint.ProtoReflect.Descriptor instead.
func (*EcPoint) Descriptor() ([]byte, []int) {
	return file_proto_device_to_device_messages_proto_rawDescGZIP(), []int{3}
}

func (x *EcPoint) GetCurve() Curve {
	if x != nil && x.Curve != nil {
		return *x.Curve
	}
	return Curve_ED_25519
}

func (x *EcPoint) GetX() []byte {
	if x != nil {
		return x.X
	}
	return nil
}

func (x *EcPoint) GetY() []byte {
	if x != nil {
		return x.Y
	}
	return nil
}

type SpakeHandshakeMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Each flow in the protocol bumps this counter
	FlowNumber *int32 `protobuf:"varint,1,opt,name=flow_number,json=flowNumber" json:"flow_number,omitempty"`
	// Some (but not all) SPAKE flows send a point on an elliptic curve
	EcPoint *EcPoint `protobuf:"bytes,2,opt,name=ec_point,json=ecPoint" json:"ec_point,omitempty"`
	// Some (but not all) SPAKE flows send a hash value
	HashValue []byte `protobuf:"bytes,3,opt,name=hash_value,json=hashValue" json:"hash_value,omitempty"`
	// The last flow of a SPAKE protocol can send an optional payload,
	// since the key exchange is already complete on the sender's side.
	Payload []byte `protobuf:"bytes,4,opt,name=payload" json:"payload,omitempty"`
}

func (x *SpakeHandshakeMessage) Reset() {
	*x = SpakeHandshakeMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_device_to_device_messages_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpakeHandshakeMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpakeHandshakeMessage) ProtoMessage() {}

func (x *SpakeHandshakeMessage) ProtoReflect() protoreflect.Message {
	mi := &file_proto_device_to_device_messages_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpakeHandshakeMessage.ProtoReflect.Descriptor instead.
func (*SpakeHandshakeMessage) Descriptor() ([]byte, []int) {
	return file_proto_device_to_device_messages_proto_rawDescGZIP(), []int{4}
}

func (x *SpakeHandshakeMessage) GetFlowNumber() int32 {
	if x != nil && x.FlowNumber != nil {
		return *x.FlowNumber
	}
	return 0
}

func (x *SpakeHandshakeMessage) GetEcPoint() *EcPoint {
	if x != nil {
		return x.EcPoint
	}
	return nil
}

func (x *SpakeHandshakeMessage) GetHashValue() []byte {
	if x != nil {
		return x.HashValue
	}
	return nil
}

func (x *SpakeHandshakeMessage) GetPayload() []byte {
	if x != nil {
		return x.Payload
	}
	return nil
}

var File_proto_device_to_device_messages_proto protoreflect.FileDescriptor

var file_proto_device_to_device_messages_proto_rawDesc = []byte{
	0x0a, 0x25, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x74,
	0x6f, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x09, 0x73, 0x65, 0x63, 0x75, 0x72, 0x65, 0x67,
	0x63, 0x6d, 0x1a, 0x19, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x65,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x5a, 0x0a,
	0x15, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x6f, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x27, 0x0a, 0x0f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x73, 0x65, 0x71, 0x75, 0x65,
	0x6e, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0x83, 0x01, 0x0a, 0x0e, 0x49, 0x6e,
	0x69, 0x74, 0x69, 0x61, 0x74, 0x6f, 0x72, 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x12, 0x43, 0x0a, 0x0d,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x64, 0x68, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x50, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x4b, 0x65, 0x79, 0x52, 0x0b, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x44, 0x68, 0x4b, 0x65,
	0x79, 0x12, 0x2c, 0x0a, 0x10, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x3a, 0x01, 0x30, 0x52, 0x0f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22,
	0x83, 0x01, 0x0a, 0x0e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x65, 0x72, 0x48, 0x65, 0x6c,
	0x6c, 0x6f, 0x12, 0x43, 0x0a, 0x0d, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x64, 0x68, 0x5f,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x73, 0x65, 0x63, 0x75,
	0x72, 0x65, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x69,
	0x63, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x52, 0x0b, 0x70, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x44, 0x68, 0x4b, 0x65, 0x79, 0x12, 0x2c, 0x0a, 0x10, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x3a, 0x01, 0x30, 0x52, 0x0f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x4d, 0x0a, 0x07, 0x45, 0x63, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x12, 0x26, 0x0a, 0x05, 0x63, 0x75, 0x72, 0x76, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0e, 0x32,
	0x10, 0x2e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x65, 0x67, 0x63, 0x6d, 0x2e, 0x43, 0x75, 0x72, 0x76,
	0x65, 0x52, 0x05, 0x63, 0x75, 0x72, 0x76, 0x65, 0x12, 0x0c, 0x0a, 0x01, 0x78, 0x18, 0x02, 0x20,
	0x02, 0x28, 0x0c, 0x52, 0x01, 0x78, 0x12, 0x0c, 0x0a, 0x01, 0x79, 0x18, 0x03, 0x20, 0x02, 0x28,
	0x0c, 0x52, 0x01, 0x79, 0x22, 0xa0, 0x01, 0x0a, 0x15, 0x53, 0x70, 0x61, 0x6b, 0x65, 0x48, 0x61,
	0x6e, 0x64, 0x73, 0x68, 0x61, 0x6b, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1f,
	0x0a, 0x0b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0a, 0x66, 0x6c, 0x6f, 0x77, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12,
	0x2d, 0x0a, 0x08, 0x65, 0x63, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x65, 0x67, 0x63, 0x6d, 0x2e, 0x45, 0x63,
	0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x07, 0x65, 0x63, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x1d,
	0x0a, 0x0a, 0x68, 0x61, 0x73, 0x68, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x09, 0x68, 0x61, 0x73, 0x68, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07,
	0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x2a, 0x15, 0x0a, 0x05, 0x43, 0x75, 0x72, 0x76, 0x65,
	0x12, 0x0c, 0x0a, 0x08, 0x45, 0x44, 0x5f, 0x32, 0x35, 0x35, 0x31, 0x39, 0x10, 0x01, 0x42, 0x59,
	0x0a, 0x2b, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x73, 0x65, 0x63,
	0x75, 0x72, 0x69, 0x74, 0x79, 0x2e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x61, 0x75, 0x74, 0x68, 0x2e,
	0x6c, 0x69, 0x62, 0x2e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x65, 0x67, 0x63, 0x6d, 0x42, 0x1b, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x6f, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x03, 0x5a, 0x04, 0x2e, 0x2f,
	0x70, 0x62, 0xa2, 0x02, 0x04, 0x53, 0x47, 0x43, 0x4d,
}

var (
	file_proto_device_to_device_messages_proto_rawDescOnce sync.Once
	file_proto_device_to_device_messages_proto_rawDescData = file_proto_device_to_device_messages_proto_rawDesc
)

func file_proto_device_to_device_messages_proto_rawDescGZIP() []byte {
	file_proto_device_to_device_messages_proto_rawDescOnce.Do(func() {
		file_proto_device_to_device_messages_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_device_to_device_messages_proto_rawDescData)
	})
	return file_proto_device_to_device_messages_proto_rawDescData
}

var file_proto_device_to_device_messages_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_proto_device_to_device_messages_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_proto_device_to_device_messages_proto_goTypes = []interface{}{
	(Curve)(0),                    // 0: securegcm.Curve
	(*DeviceToDeviceMessage)(nil), // 1: securegcm.DeviceToDeviceMessage
	(*InitiatorHello)(nil),        // 2: securegcm.InitiatorHello
	(*ResponderHello)(nil),        // 3: securegcm.ResponderHello
	(*EcPoint)(nil),               // 4: securegcm.EcPoint
	(*SpakeHandshakeMessage)(nil), // 5: securegcm.SpakeHandshakeMessage
	(*GenericPublicKey)(nil),      // 6: securemessage.GenericPublicKey
}
var file_proto_device_to_device_messages_proto_depIdxs = []int32{
	6, // 0: securegcm.InitiatorHello.public_dh_key:type_name -> securemessage.GenericPublicKey
	6, // 1: securegcm.ResponderHello.public_dh_key:type_name -> securemessage.GenericPublicKey
	0, // 2: securegcm.EcPoint.curve:type_name -> securegcm.Curve
	4, // 3: securegcm.SpakeHandshakeMessage.ec_point:type_name -> securegcm.EcPoint
	4, // [4:4] is the sub-list for method output_type
	4, // [4:4] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_proto_device_to_device_messages_proto_init() }
func file_proto_device_to_device_messages_proto_init() {
	if File_proto_device_to_device_messages_proto != nil {
		return
	}
	file_proto_securemessage_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_proto_device_to_device_messages_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceToDeviceMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_device_to_device_messages_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InitiatorHello); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_device_to_device_messages_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponderHello); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_device_to_device_messages_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EcPoint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_device_to_device_messages_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpakeHandshakeMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_device_to_device_messages_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_proto_device_to_device_messages_proto_goTypes,
		DependencyIndexes: file_proto_device_to_device_messages_proto_depIdxs,
		EnumInfos:         file_proto_device_to_device_messages_proto_enumTypes,
		MessageInfos:      file_proto_device_to_device_messages_proto_msgTypes,
	}.Build()
	File_proto_device_to_device_messages_proto = out.File
	file_proto_device_to_device_messages_proto_rawDesc = nil
	file_proto_device_to_device_messages_proto_goTypes = nil
	file_proto_device_to_device_messages_proto_depIdxs = nil
}
