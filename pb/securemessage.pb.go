// Copyright 2020 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Proto definitions for SecureMessage format

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.12.4
// source: proto/securemessage.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Supported "signature" schemes (both symmetric key and public key based)
type SigScheme int32

const (
	SigScheme_HMAC_SHA256       SigScheme = 1
	SigScheme_ECDSA_P256_SHA256 SigScheme = 2
	// Not recommended -- use ECDSA_P256_SHA256 instead
	SigScheme_RSA2048_SHA256 SigScheme = 3
)

// Enum value maps for SigScheme.
var (
	SigScheme_name = map[int32]string{
		1: "HMAC_SHA256",
		2: "ECDSA_P256_SHA256",
		3: "RSA2048_SHA256",
	}
	SigScheme_value = map[string]int32{
		"HMAC_SHA256":       1,
		"ECDSA_P256_SHA256": 2,
		"RSA2048_SHA256":    3,
	}
)

func (x SigScheme) Enum() *SigScheme {
	p := new(SigScheme)
	*p = x
	return p
}

func (x SigScheme) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SigScheme) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_securemessage_proto_enumTypes[0].Descriptor()
}

func (SigScheme) Type() protoreflect.EnumType {
	return &file_proto_securemessage_proto_enumTypes[0]
}

func (x SigScheme) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *SigScheme) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = SigScheme(num)
	return nil
}

// Deprecated: Use SigScheme.Descriptor instead.
func (SigScheme) EnumDescriptor() ([]byte, []int) {
	return file_proto_securemessage_proto_rawDescGZIP(), []int{0}
}

// Supported encryption schemes
type EncScheme int32

const (
	// No encryption
	EncScheme_NONE        EncScheme = 1
	EncScheme_AES_256_CBC EncScheme = 2
)

// Enum value maps for EncScheme.
var (
	EncScheme_name = map[int32]string{
		1: "NONE",
		2: "AES_256_CBC",
	}
	EncScheme_value = map[string]int32{
		"NONE":        1,
		"AES_256_CBC": 2,
	}
)

func (x EncScheme) Enum() *EncScheme {
	p := new(EncScheme)
	*p = x
	return p
}

func (x EncScheme) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EncScheme) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_securemessage_proto_enumTypes[1].Descriptor()
}

func (EncScheme) Type() protoreflect.EnumType {
	return &file_proto_securemessage_proto_enumTypes[1]
}

func (x EncScheme) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EncScheme) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EncScheme(num)
	return nil
}

// Deprecated: Use EncScheme.Descriptor instead.
func (EncScheme) EnumDescriptor() ([]byte, []int) {
	return file_proto_securemessage_proto_rawDescGZIP(), []int{1}
}

// A list of supported public key types
type PublicKeyType int32

const (
	PublicKeyType_EC_P256 PublicKeyType = 1
	PublicKeyType_RSA2048 PublicKeyType = 2
	// 2048-bit MODP group 14, from RFC 3526
	PublicKeyType_DH2048_MODP PublicKeyType = 3
)

// Enum value maps for PublicKeyType.
var (
	PublicKeyType_name = map[int32]string{
		1: "EC_P256",
		2: "RSA2048",
		3: "DH2048_MODP",
	}
	PublicKeyType_value = map[string]int32{
		"EC_P256":     1,
		"RSA2048":     2,
		"DH2048_MODP": 3,
	}
)

func (x PublicKeyType) Enum() *PublicKeyType {
	p := new(PublicKeyType)
	*p = x
	return p
}

func (x PublicKeyType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PublicKeyType) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_securemessage_proto_enumTypes[2].Descriptor()
}

func (PublicKeyType) Type() protoreflect.EnumType {
	return &file_proto_securemessage_proto_enumTypes[2]
}

func (x PublicKeyType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *PublicKeyType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = PublicKeyType(num)
	return nil
}

// Deprecated: Use PublicKeyType.Descriptor instead.
func (PublicKeyType) EnumDescriptor() ([]byte, []int) {
	return file_proto_securemessage_proto_rawDescGZIP(), []int{2}
}

type SecureMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Must contain a HeaderAndBody message
	HeaderAndBody []byte `protobuf:"bytes,1,req,name=header_and_body,json=headerAndBody" json:"header_and_body,omitempty"`
	// Signature of header_and_body
	Signature []byte `protobuf:"bytes,2,req,name=signature" json:"signature,omitempty"`
}

func (x *SecureMessage) Reset() {
	*x = SecureMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_securemessage_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SecureMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecureMessage) ProtoMessage() {}

func (x *SecureMessage) ProtoReflect() protoreflect.Message {
	mi := &file_proto_securemessage_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecureMessage.ProtoReflect.Descriptor instead.
func (*SecureMessage) Descriptor() ([]byte, []int) {
	return file_proto_securemessage_proto_rawDescGZIP(), []int{0}
}

func (x *SecureMessage) GetHeaderAndBody() []byte {
	if x != nil {
		return x.HeaderAndBody
	}
	return nil
}

func (x *SecureMessage) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

type Header struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SignatureScheme  *SigScheme `protobuf:"varint,1,req,name=signature_scheme,json=signatureScheme,enum=securemessage.SigScheme" json:"signature_scheme,omitempty"`
	EncryptionScheme *EncScheme `protobuf:"varint,2,req,name=encryption_scheme,json=encryptionScheme,enum=securemessage.EncScheme" json:"encryption_scheme,omitempty"`
	// Identifies the verification key
	VerificationKeyId []byte `protobuf:"bytes,3,opt,name=verification_key_id,json=verificationKeyId" json:"verification_key_id,omitempty"`
	// Identifies the decryption key
	DecryptionKeyId []byte `protobuf:"bytes,4,opt,name=decryption_key_id,json=decryptionKeyId" json:"decryption_key_id,omitempty"`
	// Encryption may use an IV
	Iv []byte `protobuf:"bytes,5,opt,name=iv" json:"iv,omitempty"`
	// Arbitrary per-protocol public data, to be sent with the plain-text header
	PublicMetadata []byte `protobuf:"bytes,6,opt,name=public_metadata,json=publicMetadata" json:"public_metadata,omitempty"`
	// The length of some associated data this is not sent in this SecureMessage,
	// but which will be bound to the signature.
	AssociatedDataLength *uint32 `protobuf:"varint,7,opt,name=associated_data_length,json=associatedDataLength,def=0" json:"associated_data_length,omitempty"`
}

// Default values for Header fields.
const (
	Default_Header_AssociatedDataLength = uint32(0)
)

func (x *Header) Reset() {
	*x = Header{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_securemessage_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Header) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Header) ProtoMessage() {}

func (x *Header) ProtoReflect() protoreflect.Message {
	mi := &file_proto_securemessage_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Header.ProtoReflect.Descriptor instead.
func (*Header) Descriptor() ([]byte, []int) {
	return file_proto_securemessage_proto_rawDescGZIP(), []int{1}
}

func (x *Header) GetSignatureScheme() SigScheme {
	if x != nil && x.SignatureScheme != nil {
		return *x.SignatureScheme
	}
	return SigScheme_HMAC_SHA256
}

func (x *Header) GetEncryptionScheme() EncScheme {
	if x != nil && x.EncryptionScheme != nil {
		return *x.EncryptionScheme
	}
	return EncScheme_NONE
}

func (x *Header) GetVerificationKeyId() []byte {
	if x != nil {
		return x.VerificationKeyId
	}
	return nil
}

func (x *Header) GetDecryptionKeyId() []byte {
	if x != nil {
		return x.DecryptionKeyId
	}
	return nil
}

func (x *Header) GetIv() []byte {
	if x != nil {
		return x.Iv
	}
	return nil
}

func (x *Header) GetPublicMetadata() []byte {
	if x != nil {
		return x.PublicMetadata
	}
	return nil
}

func (x *Header) GetAssociatedDataLength() uint32 {
	if x != nil && x.AssociatedDataLength != nil {
		return *x.AssociatedDataLength
	}
	return Default_Header_AssociatedDataLength
}

type HeaderAndBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Public data about this message (to be bound in the signature)
	Header *Header `protobuf:"bytes,1,req,name=header" json:"header,omitempty"`
	// Payload data
	Body []byte `protobuf:"bytes,2,req,name=body" json:"body,omitempty"`
}

func (x *HeaderAndBody) Reset() {
	*x = HeaderAndBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_securemessage_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HeaderAndBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HeaderAndBody) ProtoMessage() {}

func (x *HeaderAndBody) ProtoReflect() protoreflect.Message {
	mi := &file_proto_securemessage_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HeaderAndBody.ProtoReflect.Descriptor instead.
func (*HeaderAndBody) Descriptor() ([]byte, []int) {
	return file_proto_securemessage_proto_rawDescGZIP(), []int{2}
}

func (x *HeaderAndBody) GetHeader() *Header {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *HeaderAndBody) GetBody() []byte {
	if x != nil {
		return x.Body
	}
	return nil
}

// Must be kept wire-format compatible with HeaderAndBody. Provides the
// SecureMessage code with a consistent wire-format representation that
// remains stable irrespective of protobuf implementation choices. This
// low-level representation of a HeaderAndBody should not be used by
// any code outside of the SecureMessage library implementation/tests.
type HeaderAndBodyInternal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A raw (wire-format) byte encoding of a Header, suitable for hashing
	Header []byte `protobuf:"bytes,1,req,name=header" json:"header,omitempty"`
	// Payload data
	Body []byte `protobuf:"bytes,2,req,name=body" json:"body,omitempty"`
}

func (x *HeaderAndBodyInternal) Reset() {
	*x = HeaderAndBodyInternal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_securemessage_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HeaderAndBodyInternal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HeaderAndBodyInternal) ProtoMessage() {}

func (x *HeaderAndBodyInternal) ProtoReflect() protoreflect.Message {
	mi := &file_proto_securemessage_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HeaderAndBodyInternal.ProtoReflect.Descriptor instead.
func (*HeaderAndBodyInternal) Descriptor() ([]byte, []int) {
	return file_proto_securemessage_proto_rawDescGZIP(), []int{3}
}

func (x *HeaderAndBodyInternal) GetHeader() []byte {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *HeaderAndBodyInternal) GetBody() []byte {
	if x != nil {
		return x.Body
	}
	return nil
}

// A convenience proto for encoding NIST P-256 elliptic curve public keys
type EcP256PublicKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// x and y are encoded in big-endian two's complement (slightly wasteful)
	// Client MUST verify (x,y) is a valid point on NIST P256
	X []byte `protobuf:"bytes,1,req,name=x" json:"x,omitempty"`
	Y []byte `protobuf:"bytes,2,req,name=y" json:"y,omitempty"`
}

func (x *EcP256PublicKey) Reset() {
	*x = EcP256PublicKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_securemessage_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EcP256PublicKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EcP256PublicKey) ProtoMessage() {}

func (x *EcP256PublicKey) ProtoReflect() protoreflect.Message {
	mi := &file_proto_securemessage_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EcP256PublicKey.ProtoReflect.Descriptor instead.
func (*EcP256PublicKey) Descriptor() ([]byte, []int) {
	return file_proto_securemessage_proto_rawDescGZIP(), []int{4}
}

func (x *EcP256PublicKey) GetX() []byte {
	if x != nil {
		return x.X
	}
	return nil
}

func (x *EcP256PublicKey) GetY() []byte {
	if x != nil {
		return x.Y
	}
	return nil
}

// A convenience proto for encoding RSA public keys with small exponents
type SimpleRsaPublicKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Encoded in big-endian two's complement
	N []byte `protobuf:"bytes,1,req,name=n" json:"n,omitempty"`
	E *int32 `protobuf:"varint,2,opt,name=e,def=65537" json:"e,omitempty"`
}

// Default values for SimpleRsaPublicKey fields.
const (
	Default_SimpleRsaPublicKey_E = int32(65537)
)

func (x *SimpleRsaPublicKey) Reset() {
	*x = SimpleRsaPublicKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_securemessage_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SimpleRsaPublicKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SimpleRsaPublicKey) ProtoMessage() {}

func (x *SimpleRsaPublicKey) ProtoReflect() protoreflect.Message {
	mi := &file_proto_securemessage_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SimpleRsaPublicKey.ProtoReflect.Descriptor instead.
func (*SimpleRsaPublicKey) Descriptor() ([]byte, []int) {
	return file_proto_securemessage_proto_rawDescGZIP(), []int{5}
}

func (x *SimpleRsaPublicKey) GetN() []byte {
	if x != nil {
		return x.N
	}
	return nil
}

func (x *SimpleRsaPublicKey) GetE() int32 {
	if x != nil && x.E != nil {
		return *x.E
	}
	return Default_SimpleRsaPublicKey_E
}

// A convenience proto for encoding Diffie-Hellman public keys,
// for use only when Elliptic Curve based key exchanges are not possible.
// (Note that the group parameters must be specified separately)
type DhPublicKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Big-endian two's complement encoded group element
	Y []byte `protobuf:"bytes,1,req,name=y" json:"y,omitempty"`
}

func (x *DhPublicKey) Reset() {
	*x = DhPublicKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_securemessage_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DhPublicKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DhPublicKey) ProtoMessage() {}

func (x *DhPublicKey) ProtoReflect() protoreflect.Message {
	mi := &file_proto_securemessage_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DhPublicKey.ProtoReflect.Descriptor instead.
func (*DhPublicKey) Descriptor() ([]byte, []int) {
	return file_proto_securemessage_proto_rawDescGZIP(), []int{6}
}

func (x *DhPublicKey) GetY() []byte {
	if x != nil {
		return x.Y
	}
	return nil
}

type GenericPublicKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type             *PublicKeyType      `protobuf:"varint,1,req,name=type,enum=securemessage.PublicKeyType" json:"type,omitempty"`
	EcP256PublicKey  *EcP256PublicKey    `protobuf:"bytes,2,opt,name=ec_p256_public_key,json=ecP256PublicKey" json:"ec_p256_public_key,omitempty"`
	Rsa2048PublicKey *SimpleRsaPublicKey `protobuf:"bytes,3,opt,name=rsa2048_public_key,json=rsa2048PublicKey" json:"rsa2048_public_key,omitempty"`
	// Use only as a last resort
	Dh2048PublicKey *DhPublicKey `protobuf:"bytes,4,opt,name=dh2048_public_key,json=dh2048PublicKey" json:"dh2048_public_key,omitempty"`
}

func (x *GenericPublicKey) Reset() {
	*x = GenericPublicKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_securemessage_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenericPublicKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenericPublicKey) ProtoMessage() {}

func (x *GenericPublicKey) ProtoReflect() protoreflect.Message {
	mi := &file_proto_securemessage_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenericPublicKey.ProtoReflect.Descriptor instead.
func (*GenericPublicKey) Descriptor() ([]byte, []int) {
	return file_proto_securemessage_proto_rawDescGZIP(), []int{7}
}

func (x *GenericPublicKey) GetType() PublicKeyType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return PublicKeyType_EC_P256
}

func (x *GenericPublicKey) GetEcP256PublicKey() *EcP256PublicKey {
	if x != nil {
		return x.EcP256PublicKey
	}
	return nil
}

func (x *GenericPublicKey) GetRsa2048PublicKey() *SimpleRsaPublicKey {
	if x != nil {
		return x.Rsa2048PublicKey
	}
	return nil
}

func (x *GenericPublicKey) GetDh2048PublicKey() *DhPublicKey {
	if x != nil {
		return x.Dh2048PublicKey
	}
	return nil
}

var File_proto_securemessage_proto protoreflect.FileDescriptor

var file_proto_securemessage_proto_rawDesc = []byte{
	0x0a, 0x19, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x65, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0d, 0x73, 0x65, 0x63,
	0x75, 0x72, 0x65, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x55, 0x0a, 0x0d, 0x53, 0x65,
	0x63, 0x75, 0x72, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x01,
	0x20, 0x02, 0x28, 0x0c, 0x52, 0x0d, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x41, 0x6e, 0x64, 0x42,
	0x6f, 0x64, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x18, 0x02, 0x20, 0x02, 0x28, 0x0c, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x22, 0xe2, 0x02, 0x0a, 0x06, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x43, 0x0a, 0x10,
	0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x65, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x53, 0x69, 0x67, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x65,
	0x52, 0x0f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x53, 0x63, 0x68, 0x65, 0x6d,
	0x65, 0x12, 0x45, 0x0a, 0x11, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x73, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x73,
	0x65, 0x63, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x45, 0x6e, 0x63,
	0x53, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x52, 0x10, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x76, 0x65, 0x72, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x11, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x64, 0x65, 0x63, 0x72,
	0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x0f, 0x64, 0x65, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4b,
	0x65, 0x79, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x76, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x02, 0x69, 0x76, 0x12, 0x27, 0x0a, 0x0f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0e, 0x70,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x37, 0x0a,
	0x16, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x61,
	0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30,
	0x52, 0x14, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61,
	0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x22, 0x52, 0x0a, 0x0d, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x41, 0x6e, 0x64, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x2d, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x65,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x02,
	0x20, 0x02, 0x28, 0x0c, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x22, 0x43, 0x0a, 0x15, 0x48, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x41, 0x6e, 0x64, 0x42, 0x6f, 0x64, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x02, 0x28, 0x0c, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x62,
	0x6f, 0x64, 0x79, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0c, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x22,
	0x2d, 0x0a, 0x0f, 0x45, 0x63, 0x50, 0x32, 0x35, 0x36, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b,
	0x65, 0x79, 0x12, 0x0c, 0x0a, 0x01, 0x78, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0c, 0x52, 0x01, 0x78,
	0x12, 0x0c, 0x0a, 0x01, 0x79, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0c, 0x52, 0x01, 0x79, 0x22, 0x37,
	0x0a, 0x12, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x52, 0x73, 0x61, 0x50, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x4b, 0x65, 0x79, 0x12, 0x0c, 0x0a, 0x01, 0x6e, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0c, 0x52,
	0x01, 0x6e, 0x12, 0x13, 0x0a, 0x01, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x3a, 0x05, 0x36,
	0x35, 0x35, 0x33, 0x37, 0x52, 0x01, 0x65, 0x22, 0x1b, 0x0a, 0x0b, 0x44, 0x68, 0x50, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x12, 0x0c, 0x0a, 0x01, 0x79, 0x18, 0x01, 0x20, 0x02, 0x28,
	0x0c, 0x52, 0x01, 0x79, 0x22, 0xaa, 0x02, 0x0a, 0x10, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63,
	0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x12, 0x30, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x65,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65,
	0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x4b, 0x0a, 0x12, 0x65,
	0x63, 0x5f, 0x70, 0x32, 0x35, 0x36, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65,
	0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x65,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x45, 0x63, 0x50, 0x32, 0x35, 0x36, 0x50, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x52, 0x0f, 0x65, 0x63, 0x50, 0x32, 0x35, 0x36, 0x50,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x12, 0x4f, 0x0a, 0x12, 0x72, 0x73, 0x61, 0x32,
	0x30, 0x34, 0x38, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x2e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x52, 0x73, 0x61, 0x50, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x52, 0x10, 0x72, 0x73, 0x61, 0x32, 0x30, 0x34, 0x38,
	0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x12, 0x46, 0x0a, 0x11, 0x64, 0x68, 0x32,
	0x30, 0x34, 0x38, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x2e, 0x44, 0x68, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79,
	0x52, 0x0f, 0x64, 0x68, 0x32, 0x30, 0x34, 0x38, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65,
	0x79, 0x2a, 0x47, 0x0a, 0x09, 0x53, 0x69, 0x67, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x12, 0x0f,
	0x0a, 0x0b, 0x48, 0x4d, 0x41, 0x43, 0x5f, 0x53, 0x48, 0x41, 0x32, 0x35, 0x36, 0x10, 0x01, 0x12,
	0x15, 0x0a, 0x11, 0x45, 0x43, 0x44, 0x53, 0x41, 0x5f, 0x50, 0x32, 0x35, 0x36, 0x5f, 0x53, 0x48,
	0x41, 0x32, 0x35, 0x36, 0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e, 0x52, 0x53, 0x41, 0x32, 0x30, 0x34,
	0x38, 0x5f, 0x53, 0x48, 0x41, 0x32, 0x35, 0x36, 0x10, 0x03, 0x2a, 0x26, 0x0a, 0x09, 0x45, 0x6e,
	0x63, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10,
	0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x41, 0x45, 0x53, 0x5f, 0x32, 0x35, 0x36, 0x5f, 0x43, 0x42, 0x43,
	0x10, 0x02, 0x2a, 0x3a, 0x0a, 0x0d, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x45, 0x43, 0x5f, 0x50, 0x32, 0x35, 0x36, 0x10, 0x01,
	0x12, 0x0b, 0x0a, 0x07, 0x52, 0x53, 0x41, 0x32, 0x30, 0x34, 0x38, 0x10, 0x02, 0x12, 0x0f, 0x0a,
	0x0b, 0x44, 0x48, 0x32, 0x30, 0x34, 0x38, 0x5f, 0x4d, 0x4f, 0x44, 0x50, 0x10, 0x03, 0x42, 0x54,
	0x0a, 0x2f, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x73, 0x65, 0x63,
	0x75, 0x72, 0x69, 0x74, 0x79, 0x2e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x61, 0x75, 0x74, 0x68, 0x2e,
	0x6c, 0x69, 0x62, 0x2e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x42, 0x12, 0x53, 0x65, 0x63, 0x75, 0x72, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x03, 0x5a, 0x04, 0x2e, 0x2f, 0x70, 0x62, 0xa2, 0x02, 0x04,
	0x53, 0x4d, 0x53, 0x47,
}

var (
	file_proto_securemessage_proto_rawDescOnce sync.Once
	file_proto_securemessage_proto_rawDescData = file_proto_securemessage_proto_rawDesc
)

func file_proto_securemessage_proto_rawDescGZIP() []byte {
	file_proto_securemessage_proto_rawDescOnce.Do(func() {
		file_proto_securemessage_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_securemessage_proto_rawDescData)
	})
	return file_proto_securemessage_proto_rawDescData
}

var file_proto_securemessage_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_proto_securemessage_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_proto_securemessage_proto_goTypes = []interface{}{
	(SigScheme)(0),                // 0: securemessage.SigScheme
	(EncScheme)(0),                // 1: securemessage.EncScheme
	(PublicKeyType)(0),            // 2: securemessage.PublicKeyType
	(*SecureMessage)(nil),         // 3: securemessage.SecureMessage
	(*Header)(nil),                // 4: securemessage.Header
	(*HeaderAndBody)(nil),         // 5: securemessage.HeaderAndBody
	(*HeaderAndBodyInternal)(nil), // 6: securemessage.HeaderAndBodyInternal
	(*EcP256PublicKey)(nil),       // 7: securemessage.EcP256PublicKey
	(*SimpleRsaPublicKey)(nil),    // 8: securemessage.SimpleRsaPublicKey
	(*DhPublicKey)(nil),           // 9: securemessage.DhPublicKey
	(*GenericPublicKey)(nil),      // 10: securemessage.GenericPublicKey
}
var file_proto_securemessage_proto_depIdxs = []int32{
	0, // 0: securemessage.Header.signature_scheme:type_name -> securemessage.SigScheme
	1, // 1: securemessage.Header.encryption_scheme:type_name -> securemessage.EncScheme
	4, // 2: securemessage.HeaderAndBody.header:type_name -> securemessage.Header
	2, // 3: securemessage.GenericPublicKey.type:type_name -> securemessage.PublicKeyType
	7, // 4: securemessage.GenericPublicKey.ec_p256_public_key:type_name -> securemessage.EcP256PublicKey
	8, // 5: securemessage.GenericPublicKey.rsa2048_public_key:type_name -> securemessage.SimpleRsaPublicKey
	9, // 6: securemessage.GenericPublicKey.dh2048_public_key:type_name -> securemessage.DhPublicKey
	7, // [7:7] is the sub-list for method output_type
	7, // [7:7] is the sub-list for method input_type
	7, // [7:7] is the sub-list for extension type_name
	7, // [7:7] is the sub-list for extension extendee
	0, // [0:7] is the sub-list for field type_name
}

func init() { file_proto_securemessage_proto_init() }
func file_proto_securemessage_proto_init() {
	if File_proto_securemessage_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_securemessage_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SecureMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_securemessage_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Header); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_securemessage_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HeaderAndBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_securemessage_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HeaderAndBodyInternal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_securemessage_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EcP256PublicKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_securemessage_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SimpleRsaPublicKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_securemessage_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DhPublicKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_securemessage_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GenericPublicKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_securemessage_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_proto_securemessage_proto_goTypes,
		DependencyIndexes: file_proto_securemessage_proto_depIdxs,
		EnumInfos:         file_proto_securemessage_proto_enumTypes,
		MessageInfos:      file_proto_securemessage_proto_msgTypes,
	}.Build()
	File_proto_securemessage_proto = out.File
	file_proto_securemessage_proto_rawDesc = nil
	file_proto_securemessage_proto_goTypes = nil
	file_proto_securemessage_proto_depIdxs = nil
}
